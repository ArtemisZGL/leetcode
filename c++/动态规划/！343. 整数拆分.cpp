/*
动态规划，将问题首先划分为子问题，
定义状态D（i）为数字i的划分为整数和的最大乘积

状态转移方程则可以看成是分1...i-1种情况，d(i) = max(j * (i-j), j * dp[i - j])  j = 1,2 ・・・・・・ i -1
看成是将一个数分成j和i-j，那么乘积就是j * d(i-j)
为什么要加上 j * (i-j)的比较呢， 是为了处理dp[i] < i的情况， 例如
n=4， 那么如果不考虑 j * (i-j)， 因为dp[2] = 1 <2, 所以最终的结果为3， 但是其实把4分成2 * 2， 最终结果为4. 所以要加上 j * (i-j) 直接把i分成两个数字i, j-i,的情况。

初始化的话就将d(1) = 1

*/

/*

给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。

示例 1:

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1。
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
说明: 你可以假设 n 不小于 2 且不大于 58。
*/
 
class Solution {
public:
    int integerBreak(int n) {
        if(n == 0)
            return 0;
        if(n == 1)
            return 1;
        vector<int> D(n+1);
        D[1] = 1;
        for(int i = 2; i < n+1; i++)
        {
            for(int j = 1; j < i; j++)
                D[i] = max(D[i], max(D[i-j]*j, j*(i-j)));
        }
        return D[n];
    }
};
