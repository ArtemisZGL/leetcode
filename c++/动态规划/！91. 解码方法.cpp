/*
动态规划，定义状态D(i)代表长度i时的编码方式总数
状态转移方程：第i位数字有两种编码方式，一种是和前面数字一起编码，另一种是自己编码
自己编码的条件：当前位不为0，此时d(i) += d(i-1), 否则d(i) += 0
和前面编码的条件，组成两位数且小于26, 此时d(i) += d(i-2), 否则 += 0
(这里注意不要重复)
初始状态 D(0) = 1, D(1)分情况等于0,1或者2
*/

/*
一条包含字母 A-Z 的消息通过以下方式进行了编码：

'A' -> 1
'B' -> 2
...
'Z' -> 26
给定一个只包含数字的非空字符串，请计算解码方法的总数。

示例 1:

输入: "12"
输出: 2
解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2:

输入: "226"
输出: 3
解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
*/
class Solution {
public:
    int numDecodings(string s) {
        if(s.length() <= 0)
            return 0;
        //注意输入为'0'的情况
        if(s.length() == 1 && s[0] !='0')
            return 1;
        else if(s.length() == 1 && s[0] == '0')
            return 0;
        
        vector<int> D(s.length(), 0);
        if(s[0] != '0')
            D[0] = 1;
        if(s[1] != '0')
            D[1] += D[0];
        if(s[0] != '0' && (s[0] - '0') * 10 + (s[1] - '0') <= 26)
            D[1] += 1;
        
        for(int i = 2; i < s.length(); i++)
        {
            if(s[i] != '0')
                D[i] += D[i-1];
            
            if(s[i-1] == '0')
                continue;
            
            if((s[i-1] - '0') * 10 + (s[i] - '0') <= 26)
                D[i] += D[i-2];
        }
        return D[s.length() - 1];
    }
};
