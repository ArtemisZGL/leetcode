/*
相当于两个背包的组合，一个背包的容量是0的个数，一个背包的容量是1的个数，然后把字符串放到背包中，看最多能放多少个背包

定义状态：dp[j,k]:表示在0的容量为j，1的容量为k的时候能装下的最多字符串,在前i个字符串（线性优化过）
状态转移方程：dp[j,k] = max(dp(j,k) ，dp(j-0i, j-1i) + 1)
初始状态：dp[j]
*/

/*
在计算机界中，我们总是追求用有限的资源获取最大的收益。

现在，假设你分别支配着 m 个 0 和 n 个 1。另外，还有一个仅包含 0 和 1 字符串的数组。

你的任务是使用给定的 m 个 0 和 n 个 1 ，找到能拼出存在于数组中的字符串的最大数量。每个 0 和 1 至多被使用一次。

注意:

给定 0 和 1 的数量都不会超过 100。
给定字符串数组的长度不会超过 600。
示例 1:

输入: Array = {"10", "0001", "111001", "1", "0"}, m = 5, n = 3
输出: 4

解释: 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 "10","0001","1","0" 。
示例 2:

输入: Array = {"10", "0", "1"}, m = 1, n = 1
输出: 2

解释: 你可以拼出 "10"，但之后就没有剩余数字了。更好的选择是拼出 "0" 和 "1" 。
*/ 

class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        if(strs.size() == 0)
            return 0;
        
        //是否默认初始化为0
        int D[m + 1][n + 1];
        for(int i = 0; i < m+1; i++)
            for(int j = 0; j < n+1; j++)
                D[i][j] = 0;
        
        for(int i = 0; i < strs.size(); i++)
        {
            int zeros = 0;
            int ones = 0;
            //统计0和1的数量
            for(int c = 0; c < strs[i].length(); c++)
            {
                if(strs[i][c] == '0')
                    zeros++;
                else
                    ones++;
            }
            
            //对容量进行遍历，直接遍历到能恰好放下就行
            for(int j = m; j >= zeros; j--)
                for(int k = n; k >=ones; k--)
                {
                    D[j][k] = max(D[j][k],  D[j-zeros][k-ones] + 1);
                }
        }
        
        return D[m][n];
    }
};
