/*
动态规划
定义状态D(i) 表示以A[i]结尾的等差数列的个数，注意这里是以A[i]结尾的
（个人感觉更像是纪录增加了A[i]后数组比之前增加的等差数列数目）

如果数组是{1,2,3}，结果是1；
如果数组是{1,2,3,4}，结果是3；
如果数组是{1,2,3,4,5}，结果是6；
如果是数组是{1,2,3,4,5,6}，结果是10……

可以看出如果新扫描到的元素仍能和之前的元素保持等差数列关系，
那么新形成的子等差数列个数按照1，2，3，4……的规律增加

在 A[i] - A[i - 1] == A[i - 1] - A[i - 2] 的条件下，{A[i - 2], A[i - 1], A[i]} 是一个等差递增子区间。如果 {A[i - 3], A[i - 2], A[i - 1]} 是一个等差递增子区间，那么 {A[i - 3], A[i - 2], A[i - 1], A[i]} 也是等差递增子区间

意思就是{1,2,3,4}是比原来{1,2,3}新加了一个4，并且{2,3,4}也是等差的，并且所含等差数列个数肯定是和{1,2,3}一样多
并且还多了一个{1,2,3,4}

所以状态转移方程就是 A[i] - A[i - 1] == A[i - 1] - A[i - 2] 的条件下，D(i) = D(i-1) + 1
否则的话是没有增加等差数列数目的

初始化D(0)和D(1)都等于0，数列最少要有三个数
*/
/*
如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。

例如，以下数列为等差数列:

1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
以下数列不是等差数列。

1, 1, 2, 5, 7
 

数组 A 包含 N 个数，且索引从0开始。数组 A 的一个子数组划分为数组 (P, Q)，P 与 Q 是整数且满足 0<=P<Q<N 。

如果满足以下条件，则称子数组(P, Q)为等差数组：

元素 A[P], A[p + 1], ..., A[Q - 1], A[Q] 是等差的。并且 P + 1 < Q 。

函数要返回数组 A 中所有为等差数组的子数组个数。

 

示例:

A = [1, 2, 3, 4]

返回: 3, A 中有三个子等差数组: [1, 2, 3], [2, 3, 4] 以及自身 [1, 2, 3, 4]。
*/ 
class Solution {
public:
    vector<int> D;
    int numberOfArithmeticSlices(vector<int>& A) {
        if(A.size() < 3)
            return 0;
        D = vector<int>(A.size(), 0);

        for(int i = 2; i < A.size(); i++)
        {
            if(A[i] - A[i-1] == A[i-1] - A[i-2])
                D[i] = D[i-1] + 1;
        }
        
        int count = 0;
        for(int i = 0; i < D.size(); i++)
            count += D[i];
        
        return count;
    }
};

