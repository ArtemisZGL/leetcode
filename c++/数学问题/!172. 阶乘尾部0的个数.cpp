/*
给定一个整数 n，返回 n! 结果尾数中零的数量。

示例 1:

输入: 3
输出: 0
解释: 3! = 6, 尾数中没有零。
示例 2:

输入: 5
输出: 1
解释: 5! = 120, 尾数中有 1 个零.
*/ 
/*
每个数可以变成n个素数的乘积，然后素数乘积里只有2*5才能有0出来

对于阶乘来说，每2个数字就至少有一个2的因子，所以2的因子是足够的。
5的因子相对少些，至少连续5个数才能保证一定出现一个。 n/5
然后连续5^2就会出现因子中有两个5的，n / 25,（会与前面重复一个，所以相当于只要算他是一个）
以此类推

*/
class Solution {
public:
    int trailingZeroes(int n) {
        if(n == 0)
            return 0;
        
        //这里进行递归，n/5递归，这样下一层就相当于n/25
        return n / 5 + trailingZeroes(n/5);
    }
};
